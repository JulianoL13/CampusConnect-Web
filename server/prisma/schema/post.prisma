model Post {
    id Int  @id @default(autoincrement())
    title String
    text String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    author  Profile @relation(fields: [profileId], references: [id])
    community Community @relation(fields: [communityId], references: [id])
    profileId Int
    communityId Int
    comments Comment[]
    postVotes PostVote[]
}

model Comment {
    id Int @id @default(autoincrement())
    text String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    profile Profile @relation(fields: [profileId], references: [id])
    profileId Int
    post Post @relation(fields: [postId], references: [id])
    parentId  Int?  
    parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
    replies   Comment[] @relation("CommentReplies")
    postId Int
    commentVotes CommentVote[]
}

model PostVote {
    id Int  @id @default(autoincrement())
    postVote Boolean

    user User @relation(fields: [userId], references: [id])
    userId Int @unique
    post Post @relation(fields: [postId], references: [id])
    postId Int

    @@unique([userId, postId])
}

model CommentVote {
    id Int @id @default(autoincrement())
    commentVote Boolean

    user User @relation(fields: [userId], references: [id])
    userId Int @unique
    comment Comment @relation(fields: [commentId], references: [id])
    commentId Int

    @@unique([userId, commentId])
}
